service: cognito-user-pools

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  profile: petobe
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true

functions:          
  guest:
    handler: handler.hiGuest
    events:
      - http:
          path: /guest
          method: get
          cors: true

  registeredCustomer:
    handler: handler.hiCustomer
    events:
      - http:
          path: /customer
          method: get
          cors:
            origin: 'http://localhost:3000'
            # Needed for Authorization CORS
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          # authorizer 
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CustomerAuthorizer

  registeredProvider:
    handler: handler.hiProvider
    events:
      - http:
          path: /provider
          method: get
          cors:
            origin: 'http://localhost:3001'
            # Needed for Authorization CORS
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          # authorizer 
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ProviderAuthorizer




resources:
  Resources:
    # CUSTOMER POOL
    CustomerPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.customerPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CustomerPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.customerUserPoolClientName}
        GenerateSecret: False
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - implicit 
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        # cannot have trailing "/"
        CallbackURLs:
          - http://localhost:3000
        LogoutURLs:
          - http://localhost:3000
        SupportedIdentityProviders: 
          - COGNITO
        UserPoolId:
          Ref: CustomerPool

    # PROVIDER POOL
    ProviderPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.providerPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    ProviderPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.providerUserPoolClientName}
        GenerateSecret: False
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - implicit 
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        CallbackURLs: 
          - http://localhost:3001
        LogoutURLs:
          - http://localhost:3001
        SupportedIdentityProviders: 
          - COGNITO
        UserPoolId:
          Ref: ProviderPool

    # This authorizes the lambda functions
    CustomerAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: customer-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CustomerPool, Arn]

    ProviderAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: provider-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ProviderPool, Arn]

    CustomerAuthDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: "petobe-customer-portal"
        UserPoolId:
          Ref: CustomerPool
      
    ProviderAuthDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: "petobe-provider-portal"
        UserPoolId:
          Ref: ProviderPool

  Outputs:
    CustomerPoolArn:
      Value:
        Fn::GetAtt:
          - CustomerPool
          - Arn
      Export:
        Name: CustomerPoolArn-${self:provider.stage}
    ProviderPoolArn:
      Value:
        Fn::GetAtt:
          - ProviderPool
          - Arn
      Export:
        Name: ProviderPoolArn-${self:provider.stage}
        
custom:
  customerPoolName: customer-user-pool-${self:provider.stage}
  customerUserPoolClientName: customer-user-pool-client-${self:provider.stage}
  providerPoolName: provider-user-pool-${self:provider.stage}
  providerUserPoolClientName: provider-user-pool-client-${self:provider.stage}